	За да може да се чете от двоичния конфигурационнен файл е нужно да интерпретираме данните от всеки сегмент в него.
За това дефинирам една структура за мета информацията и един union за същинската информация и двете са като данни в
структура, представяща сегмента. Union-ът за същинската информация е удобен за представяне на втората част от сегмента, 
тъй като тя трябва да се интерпретира различно, спрямо конкретния тип сегмент. Идеята е, че за дадена операция върху
конкретен тип на сегмента, ще се използва само едно от полетата на union-а Essensial, което да представя данните. Union-ът
винаги е голям толкова колкото най-големото поле в него, в нашия случай 56 байта.
	При започване на програмата трябва да се провери дали броят аргументи е коректен спрямо дадена опция. Избрал съм при
отсъствие на всякакви аргументи да се изведе съобщение за грешка, но и да се покаже текстът при помощната опция -h. При наличие
на точно 1 аргумент(т.е. argc == 2) от потребителя има възможност или това да е за изваждане на помощта или да е сбъркан аргумента. Ако са въведени точно (argc == 3) два аргумента, то argv[1] трябва да е съществуващ конфигурационнен файл и argv[2] да е една
от опции за извеждане на всички параметри, използвани от устойството. Като идея как това ще стане имам, че трябва да се обожда файла
с една структура Segment и като се проверява типа на текущия сегмент, за да се знае коя част от union-а да се използва, за всеки 
активен сегмент да се извеждат стойностите от структурата.
	Ако има повече от 3 въведени аргументи от потребителя (т.е. argc >= 4), то правя проверка дали argv[2] е един от възможните
аргументи и ако не е извеждам съобщение за грешка и се излиза от програмата. В случая на -c за създаване на нов конфигурационен 
файл трябва да се отвори и създаде нов файл с подадения argv[1]. В останалите случаи трябва да се провери дали подаденият argv[1]
е обикновен файл и дали е отварянето му е било успешно.





Използвани линкове : 
https://www.geeksforgeeks.org/union-c/
https://www.youtube.com/watch?v=6uqU9Y578n4		//въпреки че клипчето засяга C++, концепцията на union е обяснена много добре